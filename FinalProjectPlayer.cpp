#include <iostream>
#include <string>
#include <fstream>
#include <vector>
class Player
  {
    private:

    //accountclass
    //shopclass
    //clockclass
    int petnumber;
    std::string username;
    public:
      class pet
        {
        private:
            int health;
        public:
            pet();
            int gethealth();
        };
      Player();
      void setusername(std::string username);
      std::string getusername();
      void setpetnumber(int petnumber);
      int getpetnumer();
      void createpet();
      //~Player()
    };
//Player and pet
  int Player::pet::gethealth()
    {
      return health;
    }
  Player::pet::pet()
    {
      health = 70;
    }
  //Player only
  Player::Player()
    {
      petnumber = 0;
      username = "";
    }
  //Sets the username
  void Player::setusername(std::string username)
    {
      this->username = username;
    }
  //returns the players username
  std::string Player::getusername()
    {
      return username;
    }

  void Player::setpetnumber(int petnumber)
    {
        this->petnumber = petnumber;
    }

  int Player::getpetnumer()
    {
      return petnumber;
    }

  void Player::createpet()
    {
      pet * pp = new pet;
      std::cout << pp->gethealth() << std::endl;
      petnumber++;
    }
//Turns strings into ints This is very helpful for loading players data
  int stringtoint(std::string a)
    {
      int b = 0;
      int c = 0;
      for(int i = 0; i < a.size(); i++)
        {
          b = a[i]-'0';
          c += b;
          if(i<(a.size()-1))
          {
            c = (c*10);
          }
        }
        return c;
      }
//menus are below

  Player* loadplayer(std::vector<std::string> userdata)
    {
      Player * returninguser = new Player;
      returninguser->setusername(userdata[0]);
      returninguser->setpetnumber(stringtoint(userdata[1]));
      return returninguser;
    }
  void startmenu(Player * returninguser)
    {

      std::cout << "Welcome back " << returninguser->getusername() << std::endl;
      std::cout << "You have " << returninguser->getpetnumer()<<" pets" << std::endl;

    }
  void newplayermenu(Player * p)
    {
      std::cout << "First please enter your username" << std::endl;
      std::string i;
      std::cin >> i;
      p->setusername(i);
      std::cout << "Your username is " << p->getusername()<< std::endl;
      std::ofstream userinfo;
      userinfo.open(std::string(i+".txt").c_str());
      userinfo << p->getusername();
      userinfo<< "\n";
      userinfo<< p->getpetnumer();
      userinfo.close();
      std::cout << "A text file has been made containing your username and data" << std::endl;
      std::cout << "For your virtual pet to work DO NOT EDIT this file" << std::endl;
      std::cout << "The program will now close and you can recompile with your account information" << std::endl;

    }
  int main(int argc, char** argv)
    {
      if(argc<=1)
      {
        std::cout << "Hello and welcome to your pet adventure!" << std::endl;
        std::cout << "We see you tried to complie without a text file. Press one if you are a new player" << std::endl;
        int i = 0;
        std::cin >> i;
        if(i == 1)
        {
          std::cout << "Welcome!" << std::endl;
          Player *p = new Player;
          newplayermenu(p);
        }
        else
        {
          std::cout << "Not a new player? Hmm... Then try entering your .txt file name again" << std::endl;
        }
      }
      else
        {
          std::vector<std::string> userdata;
          std::ifstream userfile;
          std::string line;
          userfile.open(argv[1]);
          if(userfile.is_open())
          {
            while(!userfile.eof())
              {
                std::getline(userfile,line);
                std::cout << line << std::endl;
                userdata.push_back(line);
              }
            Player * returnplayer = loadplayer(userdata);
            startmenu(returnplayer);
          }
        }
    }
